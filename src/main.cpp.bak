///////////////////////////////////////////////////////////////////
//
//   Enhanced Digital Calipers Display
//
//  Description: Added to display to show standardized sizes such
//    as nut, screw sizes and wire gauges
//
//  Author: Zef the Tinker
//  Date: 2023
//
//  Modes: 
//    Normal mm/in
//    Nuts:
//    Screws:
//    AWG:
//    Drill-bits:
//    64th:
//
//  other modes to maybe add: 
//    inter/outer modes, sockets, screw-holes, other wire gauge, 128th
//
//  Libraries:
//    https://github.com/adafruit/Adafruit_SSD1306
// https://github.com/adafruit/Adafruit-GFX-Library
//
//
//  Notes:
//    * too much serial out, takes too much time  between reading bits
//    * Generic I2C OLED displays use SSD1306 chip
/////////////////////////////////////////////////////////////////////////



#include <Arduino.h>
#include <Wire.h>             //OLED
#include <Adafruit_GFX.h>     //OLED
#include <Adafruit_SSD1306.h> //OLED


#include "tables.hpp" // data for nut/screw/drill/etc sizes

// using namespace std;


///////////////////////////////////////////////////////////
// Pin Assignments
//
#define   PIN_CAL_DATA        4    // data pin from caliper (yellow wire)
#define   PIN_CAL_CLK         5     // clock pin from caliper (brown wire)
#define   PIN_SOFT_POWER_OFF  7 //pin turn off, soft switch circuit (yellow wire)
#define   PIN_MODE_BUTTON     3 // (orange wire)

// #define   PIN_OLED_SDA      PIN_A4
//#define   PIN_OLED_SCL    PIN_A5


// OLED
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels


// Configuration
#define   DEBUG 1 // debug messages, UART
#define SHUTDOWN_TIME 60 //seconds
#define CLK_TIC_TIME 50 // microseconds (for loop)
#define SERIAL_ENABLED 1 // enable serial output




// Caliper config
#define   T_delay_before_packet 20000 //us
#define   T_clock_check 100 // us






///////////////////////////////////////////////////////////////////
// Code
//




//////////////////
// prototypes
//
void output_measurements_uart(void);
void process_cal_bit(void);
void calc_measurements(void);
void calc_alt_sizes(void);
void display_settings(void);
void calc_nut(void);
void calc_screw(void);
void calc_drill(void);
void calc_awg(void);
void calc_fraction(void);






/////////////////
// Global Vars
//
int32_t tic_cnt = 0;
uint8_t clk_prev_state = 0;
uint8_t  clk_cur_state = 0;
uint8_t packet_started = 0;
uint32_t data_cal = 0; //using the first(left most) 24bits of the 32
uint16_t measurement = 0;
// uint8_t bitbit = 0;
uint8_t unit = 0;
int8_t sign = 0; // 1 or -1
float measurement_mm = 0;
float measurement_in = 0;
// char[15] measurement_nut = ''; // text for nut size, ex(#4, 3/8)
// char[15] measurement_screw = ''; // text for screw size, ex(#8, 1/4)
// char[15] measurement_drill = ''; // text for drill size, ex(#56, #A, 3/8)
// char[15] measurement_awg = ''; // text for nut size ex(000, 14, 28)

uint8_t no_bit_detected_cnt = 0; // 
uint8_t data_bit_cnt = 0;

uint8_t mode = 0;
// modes: 0="mm,inch"; 1="64ths"; 2="nuts"; 3="screws"; 4="drill-bits"; 5="AWG"

// display output
// display_title
// display_icon
// display_line1
// display_line2

#define MAX_MODES 6  // number of modes


// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


////////////////////
// Functions
//

// process new bit from calipers
void process_cal_bit(void){

    // save new data bit
    data_cal = data_cal >> 1; //shift data
    // save data bit
    // pins data is inverted, adds 1 if false
    if(digitalRead(PIN_CAL_DATA) == LOW){
      data_cal |= 0x80000000; // shift in 1
      // Serial.print('#');
    }else{ // no need to write 0
      // Serial.print('@');
    }

        
    data_bit_cnt++; // inc bit cnt after read/stored (need to inc here because of reset)

    // if a time has passed with no new bits, reset count and data
    Serial.print(data_bit_cnt);
    Serial.print("Z");

    // if 24 bit read, data packet is done and ready to be proccessed
    if(data_bit_cnt == 24){

      // calculate the measurements from data packet
      calc_measurements();

      // find alternative measurments
      calc_alt_sizes();

      // get display details
      display_settings();

      // output the calip measurements to uart
      if(SERIAL_ENABLED || DEBUG){
        output_measurements_uart();
      }


      // if(DEBUG){ // delay output for DEBUG human readability
        // delay(0xffff);
        // delay(0xffff);
        // delay(0xffff);
        // delay(0xffff);
        // delay(0xffff);
      // }
      data_bit_cnt = 0; // reset cnt after 24 bits received
    }
}



// Display settings
void display_settings(void){

  if(SERIAL_ENABLED){
    Serial.print("Mode: ");
  }

  // these options should be equal to MAX MODES
  if(mode == 0){ // mm-inch
    if(SERIAL_ENABLED){
      Serial.println("mm/inches");
    }    
  }else if(mode == 1){ //fractions
    if(SERIAL_ENABLED){
      Serial.println("fractions");
    }    
  }else if(mode == 2){ // nuts-socket
    if(SERIAL_ENABLED){
      Serial.println("nuts/socket");
    }    
  }else if(mode == 3){ // screw
    if(SERIAL_ENABLED){
      Serial.println("screw-size");
    }    
  }else if(mode == 4){ // drill-bit
    if(SERIAL_ENABLED){
      Serial.println("drill-bit size");
    }    
  }else if(mode == 5){ // AWG
    if(SERIAL_ENABLED){
      Serial.println("AWG");
    }    
  }
}





// Calculate measurements from data
void calc_measurements(void){
      Serial.print("."); 
      // check units
      unit = (data_cal >> 31) & 0x00000001;
      if(DEBUG){
        Serial.println("|"); // end of line
        Serial.print("units=");
        if( unit ){
          Serial.println("in");
        }else{
          Serial.println("mm");
        }
      }
      // Check sign +/-
      sign = (data_cal >> 28) & 0x00000001 ;
      if(DEBUG){
        Serial.print("sign=");
      }
      if( sign ){
        if (DEBUG){
          Serial.println("-");
        }
        sign = -1;
      }else{
        if(DEBUG){
          Serial.println("+");
        }
        sign = 1;
      }

      if(DEBUG){ //raw data
        Serial.println("data packet=");
        Serial.println(data_cal, BIN);
        Serial.print("####XXXX####XXXX");
        Serial.println("####XXXX####XXXX");
      }

     // calculate measurements (mm/in)
      measurement = 0;
      if ( unit ){ // inches
        // bitbit = 0;
        measurement = 0;
        for (int i = 24; i >= 8; i--){ 
          // ignoring the +0.0005 bit because back of calipers state 
          //  res=0.01in, acuracy= +/- 0.01in
          // bitbit = (data_cal >> (i + 1) ) & 0x00000001;
          // if(DEBUG){
          //   Serial.print(bitbit);
          // }
          measurement |= (data_cal >> (i + 1) ) & 0x00000001; //store bit
          measurement <<= 1; //shift
        }
        measurement >>= 1; //unshift
        // convert bin to inches
        measurement_in = (float)sign * (float)measurement / 1000;
        measurement_mm = measurement_in * 25.4;
      }else{ // mm
        // bitbit = 0;
        measurement = 0;
        for (int i = 23; i >= 7; i--){
          // bitbit = (data_cal >> (i + 1) ) & 0x00000001;
          // if(DEBUG){
          //   Serial.print(bitbit);
          // }
          measurement |= (data_cal >> (i + 1) ) & 0x00000001; // store bit
          measurement <<= 1; //shift
        }
        measurement >>= 1; //unshift
        // convert bin to mm
        measurement_mm = (float)sign * (float)measurement/100;
        measurement_in = measurement_mm / 25.4;
      }


    Serial.println(measurement_in);
}



void calc_alt_sizes(void){
  // Using caliper measurements in inches, 
  // estimate the closest standard values,
  // and display percentage off from that value
  // Standard values and their size in inches stored in "tables.hpp"
  //
  //  Examples:
  //    Nut: 3/8
  //    Drill: #56
  //    Screw: #8
  //
 // calc_nut();
 // calc_screw();
 // calc_drill();
//  calc_awg();
//  calc_fraction();
}


void calc_screw(void){
//   // calc the closest standard value

//   uint8_t x=0;
//   uint8_t set = 0;
//   float percent = 0;
//   String nut_text_s = "";

//   if(measurement_in < X_table_inches[0]){ // smaller than smallest 
//     nut_text_s = String("< min X size");
//     set = 1;
//   }else{
//     while(X_table_inches[x] != 0){ // loop unit
      
//       // Serial.print('.');
//       if(measurement_in <= X_table_inches[x]){
//         set = 1;
//           percent = 100 * (X_table_inches[x] - measurement_in) / measurement_in;
//           X_text_s = String(String(X_table_text[x]) + " -" + String(percent, 0) + "%");
//           break;
//       }
//       x++; 
//     }
//   }
//   if(set == 0){
//     X_text_s = "> max X size";
//   }

//   if(SERIAL_ENABLED){
//     Serial.print("X: ");
//     Serial.println(X_text_s);
//   }
}




void calc_drill(void){}


void calc_awg(void){}




void calc_fraction(void){
  // Fractions

  // uint8_t x=0;
  // uint8_t set = 0;
  // float percent = 0;
  // String fraction_text_s = "";
  // String sign = "  ";
  
  // while(fraction_table_inches[x] != 0){
    // Serial.println(fraction_table_text[x]);
    // x++;
  // }

  // if(measurement_in < fraction_table_inches[0]*0.5 ){ // smaller than smallest 
  //   fraction_text_s = "0\"";
  //   set = 1;
  // }else{
  //   while(fraction_table_inches[x] != 0){ // loop unit
      
  //     // Serial.print('.');
  //     if( measurement_in < (fraction_table_inches[x] + fraction_table_inches[x+1])/2 ){ 
  //       // percentage sign         
  //       //  if(measurement_in >= fraction_table_inches[x]){
  //         // sign = " +";
  //       // }else{
  //         // sign = " -";
  //       // }
  //       set = 1;
  //       //   percent = 100 * (fraction_table_inches[x] - measurement_in) / measurement_in;
  //       // fraction_text_s = fraction_table_text[x]; //String(String(fraction_table_text[x]) + sign + String(percent, 0) + "%");
  //       break;
  //     }
  //     x++; 
  //   }
  // }
  // if(set == 0){
  //   fraction_text_s = "> 6\"";
  // }

  // if(SERIAL_ENABLED){
  //   Serial.print("Fraction: ");
  //   Serial.println(fraction_text_s);
  // }

}





void calc_nut(void){
  // Using measurements_in

  // char nut_sign[1];
  // char nut_text[20]; 
  String nut_text_s = "";
  // example text
  // '7/32"           +10%'
  // '#0, #1, 5/32    - 5%'

  // Nuts
  uint8_t x=0;
  uint8_t set = 0;
  float percent = 0;

  if(measurement_in < nut_table_inches[0]){ // smaller than smallest nut
    nut_text_s = String("< min nut size");
    set = 1;
  }else{
    while(nut_table_inches[x] != 0){ // loop unit
      
      // Serial.print('.');
      if(measurement_in <= nut_table_inches[x]){
        set = 1;
          percent = 100 * (nut_table_inches[x] - measurement_in) / measurement_in;
          nut_text_s = String(String(nut_table_text[x]) + " -" + String(percent, 0) + "%");
          break;
      }
      // if(measurement_in >= nut_table_inch[x] && measurement_in < nut_table_max[x]){
      //   // found the correct size
      //   set = 1;
      //   if(measurement_in < nut_table_inches[x]){
      //     percent = 100 * (nut_table_inches[x] - measurement_in) / measurement_in;
      //     nut_text_s = String(String(nut_table_text[x]) + " -" + String(percent, 0) + "%");
      //   }else{
      //     percent = 100 * ( measurement_in - nut_table_inches[x])  / measurement_in;
      //     nut_text_s = String(String(nut_table_text[x]) + " +" + String(percent, 0) + "%");
      //   }
      // }
      x++; 
    }
  }
  if(set == 0){
    nut_text_s = "> max nut size";
  }

  if(SERIAL_ENABLED){
    Serial.print("nut: ");
    Serial.println(nut_text_s);
  }
}









// print measurement data via uart
void output_measurements_uart(void){
      if(DEBUG){
        Serial.print("measurement(bin): ");
        Serial.println(measurement, BIN);
        Serial.print("measurement(dec): ");
        Serial.println(measurement);
      }
      Serial.print("(mm): ");
      Serial.println(measurement_mm);
      Serial.print("(in): ");
      Serial.println(measurement_in, 3);
      if(DEBUG){
        Serial.print("mode number: ");
        Serial.println(mode);
      }

      // Serial.println(measurement_nut);
      Serial.println("-");


}





/////////////////////////////
// Initial Setup
//
void setup()
{

  // use pin to keep-on softswitch, and to later shutdown
  pinMode(PIN_SOFT_POWER_OFF, OUTPUT);
  digitalWrite(PIN_SOFT_POWER_OFF, HIGH);

  // pinMode(LED_BUILTIN, OUTPUT);
 
  // Caliper inputs clk and data, thru NPN transistor and internal pullup res
  pinMode(PIN_CAL_CLK, INPUT_PULLUP);       
  pinMode(PIN_CAL_DATA, INPUT_PULLUP);       
 

  // Mode button, initialize
  pinMode(PIN_MODE_BUTTON, INPUT_PULLUP);


  // Set pin close to NPN input, 
  //  to make wireing cleaner
  // pinMode(PIN_NPN_GND, OUTPUT);
  // digitalWrite(PIN_NPN_GND, LOW);

  // Setup serial
  Serial.begin(57600);
  if(SERIAL_ENABLED){
    Serial.println("Start up calipers...");
  }

}




///////////////////////////
// Looping function
//
void loop()
{
  // put your main code here, to run repeatedly:

  // get the caliper's clk state for edge detection
  clk_cur_state = digitalRead(PIN_CAL_CLK);


  // clk falling edge detected
  if( clk_cur_state == 0 && clk_prev_state == 1 ){
    if(DEBUG){ // display data bit detected
      Serial.print("o");
    }
    process_cal_bit(); //process the new bit
    no_bit_detected_cnt=0; //bit was detected
  }else{
    // No clk detected, no data bit, 
    // if there is no data for X intervals, it is between readings
    // to avoid using partial data, reset bit storage until we are
    // sure it is the begining of packet

    if(DEBUG){ // display no data bit detected
      Serial.print(".");
    }
    no_bit_detected_cnt++;
    if(no_bit_detected_cnt > 8){ 
      // time is about 10% longer than the pause between nibs
      if(DEBUG){ // display a reset
        Serial.print("^");
      }
      //   // therefor it must be between packets
      //   // so reseting counts
      data_bit_cnt = 0;
      data_cal = 0;
      no_bit_detected_cnt = 0;
    }
    
  }



  // Autoshut down 
  //   MCU+Caliper (reset soft-power switch)
  //   shuts down after SHUTDOWN_TIME
  if( tic_cnt > (long)SHUTDOWN_TIME * 1000 * 1000 / CLK_TIC_TIME){
    // shut down does not work if UART/programmer is attached, even if Vcc is cut
    if(SERIAL_ENABLED){
      Serial.println("Shutting down.");
    }
    digitalWrite(PIN_SOFT_POWER_OFF, LOW);
    digitalWrite(LED_BUILTIN, HIGH);
    delay(1000); // MCU should be shut off but this will halt when debuging
    delay(1000);
    delay(1000);
    // add a no change check
  }
  // else if(tic_cnt == 2000){
    // digitalWrite(PIN_SOFT_POWER_OFF, HIGH);
    // tic_cnt = 0;
  // }



  // Mode Button detection
  if(!digitalRead(PIN_MODE_BUTTON)){ // button pulls low

    // short button press is about 500 clk cnts(25ms)
    // long button press is about 1700 clk cnts(85ms)
    // fastest normal pressing is 500 clk-counts(25ms) ON, 400 clk-counts(20ms) OFF for me
    // I want presses to change mode once no matter the length
    // so im going to loop until a button press stops

    Serial.print("~");
    // change mode
    mode++;
    if(mode == MAX_MODES){
      mode = 0;
    }

    // loop until button press stops
    delay(15);  // milli-seconds, sleep time much less that fastest button press
    while (!digitalRead(PIN_MODE_BUTTON)){
      delay(15); //mili-seconds
    }


    // Reset data packet read
    data_bit_cnt = 0;
    data_cal = 0;
    no_bit_detected_cnt = 0;   


    if(DEBUG){
      Serial.println("-");  
      Serial.print("Click detected, ");
      Serial.print("Mode: ");
      Serial.println(mode);
      Serial.println("-");      
    }
  }


  // save clocks previous state for edge detection
  clk_prev_state = clk_cur_state;

  // inc clk cnt
  tic_cnt++;

  // sleep
  _delay_us(CLK_TIC_TIME); // less than the bits per second of data packet

}


//  End